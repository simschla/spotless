ext.artifactId = project.artifactIdMaven
ext.version = project.versionMaven
apply from: rootProject.file("gradle/java-setup.gradle")
apply from: rootProject.file("gradle/java-publish.gradle")

dependencies {
	compile project(":lib")
	compile project(":lib-extra")
	compileOnly "org.apache.maven:maven-plugin-api:${VER_MAVEN_API}"
	compileOnly "org.apache.maven.plugin-tools:maven-plugin-annotations:${VER_MAVEN_API}"
	compileOnly "org.eclipse.aether:aether-api:${VER_ECLIPSE_AETHER}"
	compileOnly "org.eclipse.aether:aether-util:${VER_ECLIPSE_AETHER}"

	testCompile project(":testlib")
	testCompile "junit:junit:${VER_JUNIT}"
	testCompile "org.assertj:assertj-core:${VER_ASSERTJ}"
	testCompile "com.diffplug.durian:durian-testlib:${VER_DURIAN}"
}

task cleanMavenProjectDir(type: Delete) { delete "build/tmpMavenProject" }

task copySourceFiles(type: Copy) {
	from "src/main/java"
	into "build/tmpMavenProject/src/main/java"
}

task copyPomXml(type: Copy) {
	from "src/main/resources/pom.xml"
	into "build/tmpMavenProject"

	// inject versions while copying
	filter { String line ->
		line.replace("VER_PLUGIN", "${project.versionMaven}")
				.replace("VER_MAVEN_API", "${VER_MAVEN_API}")
				.replace("VER_ECLIPSE_AETHER", "${VER_ECLIPSE_AETHER}")
				.replace("VER_SPOTLESS_LIB", "${project.stableLib}")
	}

	filteringCharset = "UTF-8"
}

task runMavenBuild(type: Exec, dependsOn: [
	cleanMavenProjectDir,
	copySourceFiles,
	copyPomXml
]) {
	workingDir "build/tmpMavenProject"
	commandLine "mvn", "clean", "install"
}

task buildMavenPlugin(type: Copy, dependsOn: runMavenBuild) {
	from "build/tmpMavenProject/target"
	into "build/libs"
}

build.finalizedBy buildMavenPlugin
