import com.github.mustachejava.DefaultMustacheFactory

import java.nio.file.Files
import java.nio.file.Paths

import static java.nio.charset.StandardCharsets.UTF_8
import static java.nio.file.StandardOpenOption.CREATE_NEW
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING

ext.artifactId = project.artifactIdMaven
ext.version = project.versionMaven
apply from: rootProject.file("gradle/java-setup.gradle")
apply from: rootProject.file("gradle/java-publish.gradle")

final PROJECT_DIR = project.projectDir.toString()
final BUILD_DIR = project.buildDir.toString()
final MAVEN_PROJECT_DIR = "${BUILD_DIR}/mavenProject"
final LOCAL_MAVEN_REPO_DIR = "${BUILD_DIR}/localMavenRepository"

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath "com.github.spullara.mustache.java:compiler:${VER_MUSTACHE}" }
}

dependencies {
	compile project(":lib")
	compile project(":lib-extra")
	compileOnly "org.apache.maven:maven-plugin-api:${VER_MAVEN_API}"
	compileOnly "org.apache.maven.plugin-tools:maven-plugin-annotations:${VER_MAVEN_API}"
	compileOnly "org.eclipse.aether:aether-api:${VER_ECLIPSE_AETHER}"
	compileOnly "org.eclipse.aether:aether-util:${VER_ECLIPSE_AETHER}"

	testCompile project(":testlib")
	testCompile "junit:junit:${VER_JUNIT}"
	testCompile "org.assertj:assertj-core:${VER_ASSERTJ}"
	testCompile "org.mockito:mockito-core:${VER_MOCKITO}"
	testCompile "com.diffplug.durian:durian-testlib:${VER_DURIAN}"
	testCompile "com.github.spullara.mustache.java:compiler:${VER_MUSTACHE}"
	testCompile "org.eclipse.aether:aether-api:${VER_ECLIPSE_AETHER}"
}

task cleanMavenProjectDir(type: Delete) { delete MAVEN_PROJECT_DIR }

task copySourceFiles(type: Copy) {
	from "src/main/java"
	into "${MAVEN_PROJECT_DIR}/src/main/java"
}

task createPomXml {
	doLast {
		def versions = [
			SpotlessMavenPluginVersion: project.versionMaven,
			MavenApiVersion           : VER_MAVEN_API,
			EclipseAetherVersion      : VER_ECLIPSE_AETHER,
			SpotlessLibVersion        : project.stableLib
		]

		def pomXmlTemplate = Paths.get(PROJECT_DIR, "src", "main", "resources", "pom.xml.mustache")
		def newPomXml = Paths.get(MAVEN_PROJECT_DIR, "pom.xml")

		Files.newBufferedReader(pomXmlTemplate).withCloseable { reader ->
			Files.newBufferedWriter(newPomXml, UTF_8, CREATE_NEW, TRUNCATE_EXISTING).withCloseable { writer ->
				def mustache = new DefaultMustacheFactory().compile(reader, "pom")
				mustache.execute(writer, versions)
			}
		}
	}
}

task runMavenBuild(type: Exec, dependsOn: [
	cleanMavenProjectDir,
	copySourceFiles,
	createPomXml
]) {
	workingDir MAVEN_PROJECT_DIR
	commandLine "mvn", "clean", "install"
}

task buildMavenPlugin(type: Copy, dependsOn: runMavenBuild) {
	from "${MAVEN_PROJECT_DIR}/target"
	into "${BUILD_DIR}/libs"
}

task createLocalMavenRepositoryForTests(type: Exec, dependsOn: buildMavenPlugin) {
	workingDir "${BUILD_DIR}/libs"
	commandLine "mvn", "org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file",
			"-Dfile=spotless-maven-plugin-${project.versionMaven}.jar",
			"-DgroupId=com.diffplug.spotless",
			"-DartifactId=spotless",
			"-Dversion=${project.versionMaven}",
			"-Dpackaging=paven-plugin",
			"-DlocalRepositoryPath=${LOCAL_MAVEN_REPO_DIR}"
}

test {
	// pass location of the local maven repository and plugin version to junit tests
	systemProperty "localMavenRepositoryDir", "${LOCAL_MAVEN_REPO_DIR}"
	systemProperty "spotlessMavenPluginVersion", project.versionMaven
}

test.dependsOn createLocalMavenRepositoryForTests
build.dependsOn buildMavenPlugin
