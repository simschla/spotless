import com.github.mustachejava.DefaultMustacheFactory

import java.nio.file.Files
import java.nio.file.Paths

import static java.nio.charset.StandardCharsets.UTF_8
import static java.nio.file.StandardOpenOption.CREATE_NEW
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING

ext.artifactId = project.artifactIdMaven
ext.version = project.versionMaven
apply from: rootProject.file("gradle/java-setup.gradle")
apply from: rootProject.file("gradle/java-publish.gradle")

final MAVEN_PROJECT_DIR = "mavenProject"
final PROJECT_DIR = project.projectDir.toString()

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "com.github.spullara.mustache.java:compiler:0.9.5"
	}
}

dependencies {
	compile project(":lib")
	compile project(":lib-extra")
	compileOnly "org.apache.maven:maven-plugin-api:${VER_MAVEN_API}"
	compileOnly "org.apache.maven.plugin-tools:maven-plugin-annotations:${VER_MAVEN_API}"
	compileOnly "org.eclipse.aether:aether-api:${VER_ECLIPSE_AETHER}"
	compileOnly "org.eclipse.aether:aether-util:${VER_ECLIPSE_AETHER}"

	testCompile project(":testlib")
	testCompile "junit:junit:${VER_JUNIT}"
	testCompile "org.assertj:assertj-core:${VER_ASSERTJ}"
	testCompile "com.diffplug.durian:durian-testlib:${VER_DURIAN}"
}

task cleanMavenProjectDir(type: Delete) { delete "build/${MAVEN_PROJECT_DIR}" }

task copySourceFiles(type: Copy) {
	from "src/main/java"
	into "build/${MAVEN_PROJECT_DIR}/src/main/java"
}

task createPomXml {
	doLast {
		def versions = [
				SpotlessMavenPluginVersion: project.versionMaven,
				MavenApiVersion           : VER_MAVEN_API,
				EclipseAetherVersion      : VER_ECLIPSE_AETHER,
				SpotlessLibVersion        : project.stableLib
		]

		def pomXmlTemplate = Paths.get(PROJECT_DIR, "src", "main", "resources", "pom.xml.mustache")
		def newPomXml = Paths.get(PROJECT_DIR, "build", MAVEN_PROJECT_DIR, "pom.xml")

		Files.newBufferedReader(pomXmlTemplate).withCloseable { reader ->
			Files.newBufferedWriter(newPomXml, UTF_8, CREATE_NEW, TRUNCATE_EXISTING).withCloseable { writer ->
				def mustache = new DefaultMustacheFactory().compile(reader, "pom")
				mustache.execute(writer, versions)
			}
		}
	}
}

task runMavenBuild(type: Exec, dependsOn: [
		cleanMavenProjectDir,
		copySourceFiles,
		createPomXml
]) {
	workingDir "build/${MAVEN_PROJECT_DIR}"
	commandLine "mvn", "clean", "install"
}

task buildMavenPlugin(type: Copy, dependsOn: runMavenBuild) {
	from "build/${MAVEN_PROJECT_DIR}/target"
	into "build/libs"
}

build.finalizedBy buildMavenPlugin
