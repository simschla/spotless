plugins {
	// bintray uploading
	id 'com.jfrog.bintray' version '1.3.1'
	// p2 dependencies
	id 'com.diffplug.gradle.p2.asmaven' version '3.9.0'
}

apply plugin: 'java'

// The dependencies we'd like to pull from Eclipse's p2 repositories
def eclipseDeps = [
	// The dependencies we actually use
	'org.eclipse.jdt.core',
	'org.eclipse.text',

	// Their transitives
	'org.eclipse.core.contenttype',
	'org.eclipse.core.jobs',
	'org.eclipse.core.runtime',
	'org.eclipse.core.resources',
	'org.eclipse.equinox.common',
	'org.eclipse.equinox.preferences',
	'org.eclipse.osgi'
]
// build a maven repo in our build folder containing these artifacts
p2AsMaven {
	group 'p2', {
		repoEclipse jdt_VER_ECLIPSE
		eclipseDeps.each { p2.addIU(it) }
		eclipseDeps.each { p2.addIU(it + '.source') }
	}
}

configurations {
	embeddedJars  // we will embed these into the binary artifact
	compile.extendsFrom(embeddedJars)
}

dependencies {
	// add the eclipse jars to the embedded configuration
	eclipseDeps.each { embeddedJars "p2:${it}:+" }
}

jar {
	// this embeds the eclipse jars into our "fat jar"
	from {
		configurations.embeddedJars.collect{ it.isDirectory() ? it : zipTree(it) }
	}
	// the eclipse jars are signed, and our fat jar breaks the signatures
	// so we've gotta be sure to filter out the signatures
	exclude 'META-INF/*.RSA'
	exclude 'META-INF/*.SF'
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadSources true
		downloadJavadoc true
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

////////////////
// PUBLISHING //
////////////////
def isSnapshot = project.jdt_version.endsWith('-SNAPSHOT')
// pulls the credentials from either the environment variable or gradle.properties
def cred = {
	if (System.env[it] != null) {
		return System.env[it]
	} else if (project.hasProperty(it)) {
		return project[it]
	} else {
		return 'unknown_' + it
	}
}

model {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact jar
				artifact sourcesJar
				artifact javadocJar

				groupId project.jdt_group
				artifactId project.jdt_artifactId
				version project.jdt_version

				pom.withXml {
					// remove the p2 dependencies because they are embedded
					// also remove 'com.diffplug' dependencies so that we can use spotless on its dependencies
					asNode().dependencies.'*'.each() {
						if (it.groupId.text() == 'p2') {
							it.parent().remove(it)
						}
					}
					// add MavenCentral requirements to the POM
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						name project.jdt_artifactId
						description project.jdt_description
						url "https://github.com/${project.jdt_org}/${project.name}"
						scm {
							url "https://github.com/${project.jdt_org}/${project.name}"
							connection "scm:git:git://github.com/${project.jdt_org}/${project.name}"
							developerConnection "scm:git:ssh:git@github.com/${project.jdt_org}/${project.name}"
						}
						licenses {
							license {
								name 'Eclipse Public License - v 1.0'
								url 'https://www.eclipse.org/legal/epl-v10.html'
								distribution 'repo'
							}
						}
						developers {
							developer {
								id 'nedtwigg'
								name 'Ned Twigg'
								email 'ned.twigg@diffplug.com'
							}
						}
					}
				}
			}
		}
		if (isSnapshot) {
			// upload snapshots to oss.sonatype.org
			repositories { maven {
				url = 'https://oss.sonatype.org/content/repositories/snapshots'
				credentials {
					username = cred('nexus_user')
					password = cred('nexus_pass')
				}
			} }
		}
	}
}

if (!isSnapshot) {
	// upload releases to bintray and then mavenCentral
	bintray {
		user = cred('bintray_user')
		key = cred('bintray_pass')
		publications = ['mavenJava']
		publish = true
		pkg {
			repo = 'opensource'
			name = project.jdt_artifactId
			userOrg = project.jdt_org
			version {
				name = project.jdt_version
				mavenCentralSync {
					user = cred('nexus_user')
					password = cred('nexus_pass')
				}
			}
		}
	}

	publish.dependsOn(bintrayUpload)
	bintrayUpload.dependsOn(['generatePomFileForMavenJavaPublication', jar, sourcesJar, javadocJar])
}
